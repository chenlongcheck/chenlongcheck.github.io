<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chenlongcheck.github.io</id>
    <title>个人网站</title>
    <updated>2021-08-24T02:58:36.213Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chenlongcheck.github.io"/>
    <link rel="self" href="https://chenlongcheck.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://chenlongcheck.github.io/images/avatar.png</logo>
    <icon>https://chenlongcheck.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 个人网站</rights>
    <entry>
        <title type="html"><![CDATA[react轻提示插件rc-notification]]></title>
        <id>https://chenlongcheck.github.io/post/react-qing-ti-shi-cha-jian-rc-notification/</id>
        <link href="https://chenlongcheck.github.io/post/react-qing-ti-shi-cha-jian-rc-notification/">
        </link>
        <updated>2021-08-24T02:42:49.000Z</updated>
        <content type="html"><![CDATA[<p>在一个大屏项目中需要一个提示的插件，之前项目都是用的antd的组件，里面的message是向外暴露的api方法，点击进去才发现的rc-notification（https://www.npmjs.com/package/rc-notification）。<br>
自定义message对象，带有success，warn，error方法，由此简单生成全局提示，可以根据notification的配置对象生成更复杂的对象属性</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正则]]></title>
        <id>https://chenlongcheck.github.io/post/zheng-ze/</id>
        <link href="https://chenlongcheck.github.io/post/zheng-ze/">
        </link>
        <updated>2020-11-10T03:03:26.000Z</updated>
        <content type="html"><![CDATA[<p>常用正则收集（持续更新）<br>
网页：<a href="https://www.cnblogs.com/bigkuan/p/12166290.html">https://www.cnblogs.com/bigkuan/p/12166290.html</a></p>
<pre><code class="language-text">6到18位数字和字母组合
/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,18}$/
8位号码
/^[1-9](\d{7})$/
11位手机号码
/^[1][2,3,4,5,6,7,8,9][0-9]{9}$/
可带区号的7-8位座机
/^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$/
座机号码（可带区号）
/(^[0-9]{3,4}-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^[0−9]3,4[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)/
前空格
/^\s\s*/
后空格
/\s\s*$/
首位空格
/^[\s　]|[ ]$/gi
匹配汉字
/^[\u4e00-\u9fa5]+$/i
是否为数字
/^[0-9]*$/
非0开头(正整数)
/^[1-9]\d*$/
0-100正整数
/^(?:0|[1-9][0-9]?|100)$/</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[圆弧CSS绘制和常用网页宽高属性]]></title>
        <id>https://chenlongcheck.github.io/post/yuan-hu-css-hui-zhi/</id>
        <link href="https://chenlongcheck.github.io/post/yuan-hu-css-hui-zhi/">
        </link>
        <updated>2020-11-10T02:56:37.000Z</updated>
        <content type="html"><![CDATA[<p>圆弧：通过伪类的定位居中到父元素实现，直接上CSS</p>
<pre><code class="language-css">#box {
    height: 100px;
    position: relative;
    z-index: -1;
    overflow: hidden;
}

#box::after {
    content: '';
    width: 140%;
    height: 100px;
    position: absolute;
    left: -20%;
    top: 0;
    z-index: -1;
    border-radius: 0 0 50% 50%;
    background-color: aquamarine;
}
</code></pre>
<p>宽高获取</p>
<pre><code class="language-text">document.body.clientWidth;              // 网页可见区域宽(body)
document.body.clientHeight;             // 网页可见区域高(body)
document.body.offsetWidth;              // 网页可见区域宽(body)，包括border、margin等
document.body.offsetHeight;             // 网页可见区域宽(body)，包括border、margin等
document.body.scrollWidth;              // 网页正文全文宽，包括有滚动条时的未见区域
document.body.scrollHeight;             // 网页正文全文高，包括有滚动条时的未见区域
document.body.scrollTop;                // 网页被卷去的Top(滚动条)
document.body.scrollLeft;               // 网页被卷去的Left(滚动条)
window.screenTop;                       // 浏览器距离Top
window.screenLeft;                      // 浏览器距离Left
window.screen.height;                   // 屏幕分辨率的高
window.screen.width;                    // 屏幕分辨率的宽
window.screen.availHeight;              // 屏幕可用工作区的高
window.screen.availWidth;               // 屏幕可用工作区的宽</code></pre>
]]></content>
    </entry>
</feed>