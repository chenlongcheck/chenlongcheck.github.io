<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://chenlongcheck.github.io</id>
    <title>个人网站</title>
    <updated>2021-08-10T02:52:41.066Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://chenlongcheck.github.io"/>
    <link rel="self" href="https://chenlongcheck.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://chenlongcheck.github.io/images/avatar.png</logo>
    <icon>https://chenlongcheck.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 个人网站</rights>
    <entry>
        <title type="html"><![CDATA[正则]]></title>
        <id>https://chenlongcheck.github.io/post/zheng-ze/</id>
        <link href="https://chenlongcheck.github.io/post/zheng-ze/">
        </link>
        <updated>2020-11-10T03:03:26.000Z</updated>
        <content type="html"><![CDATA[<p>常用正则收集（持续更新）<br>
网页：<a href="https://www.cnblogs.com/bigkuan/p/12166290.html">https://www.cnblogs.com/bigkuan/p/12166290.html</a></p>
<pre><code class="language-text">6到18位数字和字母组合
/^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,18}$/
8位号码
/^[1-9](\d{7})$/
11位手机号码
/^[1][2,3,4,5,6,7,8,9][0-9]{9}$/
可带区号的7-8位座机
/^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$/
座机号码（可带区号）
/(^[0-9]{3,4}-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^[0−9]3,4[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)/
前空格
/^\s\s*/
后空格
/\s\s*$/
首位空格
/^[\s　]|[ ]$/gi
匹配汉字
/^[\u4e00-\u9fa5]+$/i
是否为数字
/^[0-9]*$/
非0开头(正整数)
/^[1-9]\d*$/
0-100正整数
/^(?:0|[1-9][0-9]?|100)$/</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[圆弧CSS绘制和常用网页宽高属性]]></title>
        <id>https://chenlongcheck.github.io/post/yuan-hu-css-hui-zhi/</id>
        <link href="https://chenlongcheck.github.io/post/yuan-hu-css-hui-zhi/">
        </link>
        <updated>2020-11-10T02:56:37.000Z</updated>
        <content type="html"><![CDATA[<p>圆弧：通过伪类的定位居中到父元素实现，直接上CSS</p>
<pre><code class="language-css">#box {
    height: 100px;
    position: relative;
    z-index: -1;
    overflow: hidden;
}

#box::after {
    content: '';
    width: 140%;
    height: 100px;
    position: absolute;
    left: -20%;
    top: 0;
    z-index: -1;
    border-radius: 0 0 50% 50%;
    background-color: aquamarine;
}
</code></pre>
<p>宽高获取</p>
<pre><code class="language-text">document.body.clientWidth;              // 网页可见区域宽(body)
document.body.clientHeight;             // 网页可见区域高(body)
document.body.offsetWidth;              // 网页可见区域宽(body)，包括border、margin等
document.body.offsetHeight;             // 网页可见区域宽(body)，包括border、margin等
document.body.scrollWidth;              // 网页正文全文宽，包括有滚动条时的未见区域
document.body.scrollHeight;             // 网页正文全文高，包括有滚动条时的未见区域
document.body.scrollTop;                // 网页被卷去的Top(滚动条)
document.body.scrollLeft;               // 网页被卷去的Left(滚动条)
window.screenTop;                       // 浏览器距离Top
window.screenLeft;                      // 浏览器距离Left
window.screen.height;                   // 屏幕分辨率的高
window.screen.width;                    // 屏幕分辨率的宽
window.screen.availHeight;              // 屏幕可用工作区的高
window.screen.availWidth;               // 屏幕可用工作区的宽</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件下载]]></title>
        <id>https://chenlongcheck.github.io/post/wen-jian-xia-zai/</id>
        <link href="https://chenlongcheck.github.io/post/wen-jian-xia-zai/">
        </link>
        <updated>2020-11-10T02:18:37.000Z</updated>
        <content type="html"><![CDATA[<p>下载文档类型时可以用Blod对象接受<br>
1 对header没有特殊要求时</p>
<pre><code class="language-js">downloadFile(url) {
    url = url[0] !== 'h' ? `http://${url}` : url
    this.getBlob(url).then(blob =&gt; {
        this.saveAs(blob);
    });
}
getBlob(url) {
    return new Promise(resolve =&gt; {
        const xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'blob';
        xhr.onload = () =&gt; {
            if (xhr.status === 200) {
                resolve(xhr.response);
            }
        };
        xhr.send();
    });
}
saveAs(blob) {
    if (window.navigator.msSaveOrOpenBlob) {
        navigator.msSaveBlob(blob);
    } else {
        const link = document.createElement('a');
        const body = document.querySelector('body');
        link.href = window.URL.createObjectURL(blob);
        link.download = '下载后文件名.xlsx';
        link.style.display = 'none';
        body.appendChild(link);

        link.click();
        body.removeChild(link);
        window.URL.revokeObjectURL(link.href);
    }
}
</code></pre>
<p>2 对header有要求时可定义方法（注意请求方式是blod）</p>
<pre><code class="language-js">function getExcel(path, data) {
    return axios.get(path, { params: data, headers: { &quot;token&quot;: 12345 }, responseType: &quot;blob&quot; })
}
</code></pre>
<p>处理正常返回时的Blod对象数据</p>
<pre><code class="language-js">var blob = new Blob([res.data], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8' });   // type是接受的对应数据类型-这里是以excel为例-下面跟情况1的下载基本一致
var downloadElement = document.createElement('a');
var href = window.URL.createObjectURL(blob); //创建下载的链接
downloadElement.href = href;
downloadElement.download = '下载后文件名'; //
document.body.appendChild(downloadElement);
downloadElement.click(); //点击下载
document.body.removeChild(downloadElement); //下载完成移除元素
window.URL.revokeObjectURL(href); //释放掉blob对象 
</code></pre>
<p>提供常用下载type类型</p>
<pre><code class="language-text">.doc	application/msword
.docx	application/vnd.openxmlformats-officedocument.wordprocessingml.document
.xls	application/vnd.ms-excel
.xlsx	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
.ppt	application/vnd.ms-powerpoint
.pptx	application/vnd.openxmlformats-officedocument.presentationml.presentation
需注意的是返回的数据都是Blod对象，解析错误消息可以使用FileReader
```js
let data = error.response.data, errMsg = null;
var reader = new FileReader();
reader.readAsText(data, 'utf-8');
reader.onload = () =&gt; {
    errMsg = JSON.parse(reader.result);
}
</code></pre>
<p>3 下载时由于跨域等限制无法重命名</p>
<pre><code class="language-js">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/downloadjs/1.3.1/download.min.js&quot;&gt;&lt;/script&gt;  // 引入第三方download.js
function downloadIamge() {
    var x = new XMLHttpRequest();
    x.open(&quot;GET&quot;, &quot;https://mirror-gold-cdn.xitu.io/1693847d078aa892aaa?imageView2/1/w/100/h/100/q/85/format/webp/interlace/1&quot;, true);
    x.responseType = &quot;blob&quot;;
    x.onload = function (e) {
        download(e.target.response, &quot;awesomesauce.png&quot;, &quot;image/png&quot;);
    };
    x.send();
}</code></pre>
]]></content>
    </entry>
</feed>